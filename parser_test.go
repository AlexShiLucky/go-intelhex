package intelhex

import (
	"bytes"
	"testing"
)

type parseTestCase struct {
	in          string
	out         []Record
	recordCount int
	format      uint8
}

var parseTestCases = []parseTestCase{
	{
		":01000000CB34\n",
		[]Record{
			{1, 0, RecordTypeData, "CB"},
		},
		1,
		32,
	},
	{
		":200000000C94AE040C94D6040C94D6040C94D6040C94D6040C94D6040C94D6040C94D60438\n" +
			":200020000C94D6040C94D6040C9474320C94FB320C94D6040C94D6040C94D6040C94D604D1\n",
		[]Record{
			{64, 0, RecordTypeData, "0C94AE040C94D6040C94D6040C94D6040C94D6040C94D6040C94D6040C94D6040C94D6040C94D6040C9474320C94FB320C94D6040C94D6040C94D6040C94D604"},
		},
		1,
		32,
	},
	{
		":00000001FF\n",
		[]Record{
			{0, 0, RecordTypeEOF, ""},
		},
		1,
		32,
	},
	{
		":8700000001060069999942041FC15E00000014222200001422223B02570258025802590259025A025A025B025B025C025C025D025D025E025E025F025F02600260026102610262026202630263026402640265026502660266026702670268026802690269026A026A026B281F0AFD0400FFFFFFFF400600937600A40100020A0087002100000000000000FA\n",
		[]Record{
			{135, 0, RecordTypeData, "01060069999942041FC15E00000014222200001422223B02570258025802590259025A025A025B025B025C025C025D025D025E025E025F025F02600260026102610262026202630263026402640265026502660266026702670268026802690269026A026A026B281F0AFD0400FFFFFFFF400600937600A40100020A0087002100000000000000"},
		},
		1,
		255,
	},
	{
		n",
		[]Record{
			{251, 135, RecordTypeData},
		},
		1,
		255,
	},
}

func TestParse(t *testing.T) {
	for _, testCase := range parseTestCases {
		// fmt.Printf("testCase: %v\n", testCase)
		_, records := ParseString(testCase.in)
		var recordCount int = 0
		var b bytes.Buffer
		for record := range records {
			for _, expectedRecord := range testCase.out {
				if record != expectedRecord {
					t.Errorf("parse failed\nparsed:%v\nexpected:%v", record, expectedRecord)
				}
			}
			recordCount++
			b.Write(record.Format(testCase.format))
		}
		if recordCount != testCase.recordCount {
			t.Errorf("recordCount diff\nresult:%v\nexpected:%v", recordCount, testCase.recordCount)
		}
		if b.String() != testCase.in {
			t.Errorf("Format diff\nresult:%v\nexpected:%v", b.String(), testCase.in)
		}
	}
}
